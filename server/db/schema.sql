/* psql -U postgres < server/db/schema.sql  THIS ONE!!!*/
DROP DATABASE IF EXISTS datepicker;
CREATE DATABASE datepicker;
\ c datepicker;
DROP TABLE IF EXISTS dates;
DROP TABLE IF EXISTS follows;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS orgs;
-- DROP TABLE IF EXISTS users;
-- CREATE TABLE users (
--   user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
--   email VARCHAR(50) NOT NULL unique,
--   name VARCHAR(50) NOT NULL
-- );
CREATE TABLE orgs (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  username VARCHAR(100) NOT NULL UNIQUE,
  email VARCHAR(60) NOT NULL,
  description VARCHAR(1000) NOT NULL,
  reported INT NOT NULL DEFAULT 0,
  password VARCHAR(25) NOT NULL
);
CREATE TABLE users (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username VARCHAR(100) NOT NULL UNIQUE,
  email VARCHAR(60) NOT NULL,
  reported INT NOT NULL DEFAULT 0,
  password VARCHAR(25) NOT NULL,
  zip INT NOT NULL
);
CREATE TABLE follows (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id INT NOT NULL,
  org_id INT NOT NULL,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (org_id) REFERENCES orgs(id) ON DELETE CASCADE
);
CREATE TABLE dates (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100),
  date BIGINT,
  org_id INT NOT NULL,
  FOREIGN KEY (org_id) REFERENCES orgs(id) ON DELETE CASCADE
);
INSERT INTO orgs(
    name,
    username,
    email,
    description,
    password
  )
VALUES (
    'BBQ Party',
    'bbqparty',
    'test@gmial.com',
    'the best bbq party in town. follow us for more information!! thanks everyone!',
    'bbqparty'
  ),
  (
    'Pizza Party',
    'pizzaparty',
    'test@gmial.com',
    'the best pizza party in town. follow us for more information!! thanks everyone!',
    'pizzaparty'
  ),
  (
    'Egg Party',
    'eggparty',
    'test@gmial.com',
    'the best egg party in town. follow us for more information!! thanks everyone!',
    'eggparty'
  ),
  (
    'Pancake Party',
    'pancakeparty',
    'test@gmial.com',
    'the best pancake party in town. follow us for more information!! thanks everyone!',
    'pancakeparty'
  );
INSERT INTO users(username, email, zip, password)
VALUES ('Doug', 'test@gmial.com', 94606, 'doug'),
  ('t', 'test@gmial.com', 94606, 't'),
  ('mary', 'test@gmial.com', 94606, 'Mary'),
  (
    'adam',
    'test@gmial.com',
    94606,
    'password'
  );
INSERT INTO follows(user_id, org_id)
VALUES (3, 3),
  (3, 2),
  (2, 3),
  (2, 2);
----
-- CREATE INDEX quesiton_reported_index ON questions (reported);
-- \c datepicker;
-- \COPY questions FROM './csv/questionsCSV.csv' WITH DELIMITER ',' CSV HEADER;
-- SELECT setval(pg_get_serial_sequence('questions', 'question_id'), (SELECT MAX(question_id) from "questions"));
-- SELECT setval(pg_get_serial_sequence('answers', 'id'), (SELECT MAX(id) from "answers"));
-- SELECT setval(pg_get_serial_sequence('answer_photos', 'photo_id'), (SELECT MAX(photo_id) from "answer_photos"));